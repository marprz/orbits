cmake_minimum_required( VERSION 2.8 )
set( TARGET OrbitDetermination )
project(${TARGET})

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -Wall")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

enable_testing()
find_package(Threads)
find_package(GTest REQUIRED)
include_directories(${GTEST_INCLUDE_DIR})
include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})

add_executable( NGA readNGA.cpp )
#add_executable( NystromIntegration TestNystromIntegrators.cpp )
add_executable( GJIntegration TestGJIntegrators.cpp )
add_executable( AdamsIntegration TestAdams.cpp )

set( test_sources testTaylor.cpp )
add_executable( Tests ${test_sources} )
target_link_libraries( Tests gtest_main gtest )
target_link_libraries( Tests ${CMAKE_THREAD_LIBS_INIT} )
add_dependencies(Tests googletest)
add_test( NAME Tests COMMAND Tests )

add_executable( TestsMatrix testMatrices.cpp )
target_link_libraries( TestsMatrix gtest_main gtest )
target_link_libraries( TestsMatrix ${CMAKE_THREAD_LIBS_INIT} )
add_dependencies(TestsMatrix googletest)
add_test( NAME TestsMatrix COMMAND Tests )

